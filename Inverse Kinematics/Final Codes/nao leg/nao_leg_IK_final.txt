import socket
import threading
import numpy as np
from controller import Robot

# ------------------------ NAOqi (Real NAO) Setup ------------------------
try:
    from naoqi import ALProxy
    real_nao_available = True
except ImportError:
    print("[INFO] NAOqi not available. Running in simulation mode.")
    real_nao_available = False

# ------------------------ Config ------------------------
NAO_IP = '192.168.1.110'  # Update for real robot
NAO_PORT = 9559

HOST = '127.0.0.1'
PORT = 9998

# Left Leg link lengths
l_thigh = 0.100  # Hip to Knee
l_shank = 0.1029  # Knee to Ankle

MAX_REACH = l_thigh + l_shank + 0.01  # Add 1cm tolerance

# ------------------------ Functions ------------------------
def inverse_kinematics_left_leg(x, y, z):
    try:
        x = np.clip(x, -0.15, 0.25)
        y = np.clip(y, 0.0, 0.55)
        z = np.clip(z, -0.30, -0.10)

        d_horizontal = np.sqrt(x**2 + y**2)
        d = np.sqrt(d_horizontal**2 + z**2)

        if d > MAX_REACH:
            print(f"[WARN] Target out of reach. Scaling down from d = {d:.3f}m to {MAX_REACH:.3f}m.")
            scale = MAX_REACH / d
            x *= scale
            y *= scale
            z *= scale
            d_horizontal = np.sqrt(x**2 + y**2)
            d = np.sqrt(d_horizontal**2 + z**2)

        LHipYawPitch = np.arctan2(y, x)
        LHipRoll = np.arctan2(y, z)

        cos_knee = (l_thigh**2 + l_shank**2 - d**2) / (2 * l_thigh * l_shank)
        LKneePitch = np.arccos(np.clip(cos_knee, -1.0, 1.0))

        cos_hip_pitch = (d**2 + l_thigh**2 - l_shank**2) / (2 * d * l_thigh)
        hip_pitch_correction = np.arccos(np.clip(cos_hip_pitch, -1.0, 1.0))
        LHipPitch = np.arctan2(z, x) - hip_pitch_correction

        LAnklePitch = -(LHipPitch + LKneePitch)
        LAnkleRoll = -(LHipRoll)

        LHipYawPitch = np.clip(LHipYawPitch, -1.0, 1.0)
        LHipRoll = np.clip(LHipRoll, -0.5, 0.5)
        LHipPitch = np.clip(LHipPitch, -1.0, 0.5)
        LKneePitch = np.clip(LKneePitch, 0.0, 2.0)
        LAnklePitch = np.clip(LAnklePitch, -1.0, 0.5)
        LAnkleRoll = np.clip(LAnkleRoll, -0.5, 0.5)

        print(f"[IK Leg] Joint angles (rad): {LHipYawPitch:.3f}, {LHipRoll:.3f}, {LHipPitch:.3f}, {LKneePitch:.3f}, {LAnklePitch:.3f}, {LAnkleRoll:.3f}")
        return [LHipYawPitch, LHipRoll, LHipPitch, LKneePitch, LAnklePitch, LAnkleRoll]

    except Exception as e:
        print(f"[IK Leg] Error: {e}")
        return [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

def is_pose_stable(x, y, z):
    if not (-0.15 <= x <= 0.25):
        return False
    if not (0.0 <= y <= 0.55):   # <-- FIXED from (0.05 <= y <= 0.055) to (0.5 <= y <= 0.55)
        return False
    if not (-0.30 <= z <= 0.10):
        return False
    return True

# ------------------------ Webots Setup ------------------------
robot = Robot()
timestep = int(robot.getBasicTimeStep())

joints = {
    "LHipYawPitch": robot.getDevice("LHipYawPitch"),
    "LHipRoll": robot.getDevice("LHipRoll"),
    "LHipPitch": robot.getDevice("LHipPitch"),
    "LKneePitch": robot.getDevice("LKneePitch"),
    "LAnklePitch": robot.getDevice("LAnklePitch"),
    "LAnkleRoll": robot.getDevice("LAnkleRoll"),
}

for joint in joints.values():
    joint.setPosition(float('inf'))
    joint.setVelocity(0.5)

for joint in joints.values():
    joint.setPosition(0.0)

if real_nao_available:
    motion_proxy = ALProxy("ALMotion", NAO_IP, NAO_PORT)
    print("[REAL NAO] Connected to ALMotion.")

# ------------------------ Socket Listener ------------------------
pose_queue = []
move_ready = False

def socket_thread():
    global move_ready
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    print(f"[SIM] Listening for LEG targets on {HOST}:{PORT} ...")

    while True:
        client_socket, _ = server_socket.accept()
        data = client_socket.recv(1024).decode()
        client_socket.close()

        if data:
            try:
                x, y, z = map(float, data.strip().split(','))
                pose_queue.append((x, y, z))
                move_ready = True
                print(f"[SIM] Received LEG target: {x:.3f}, {y:.3f}, {z:.3f}")
            except ValueError:
                print("[SIM] Invalid data format received.")

threading.Thread(target=socket_thread, daemon=True).start()

# ---------------- Main Control Loop ------------------------
while robot.step(timestep) != -1:
    if move_ready and pose_queue:
        x, y, z = pose_queue.pop(0)

        if is_pose_stable(x, y, z):
            left_angles = inverse_kinematics_left_leg(x, y, z)
            left_joint_names = ["LHipYawPitch", "LHipRoll", "LHipPitch", "LKneePitch", "LAnklePitch", "LAnkleRoll"]

            if real_nao_available:
                motion_proxy.setAngles(left_joint_names, left_angles, 0.1)
                print("[REAL NAO] Sent leg angles.")
            else:
                for i, name in enumerate(left_joint_names):
                    current = joints[name].getTargetPosition()
                    target = left_angles[i]
                    move_speed = 0.8  # <-- BIGGER, FASTER movement
                    new_pos = current + move_speed * (target - current)
                    joints[name].setPosition(new_pos)
                print("[SIM] Moved leg joints in simulation.")

            move_ready = False
        else:
            print("[WARN] Rejected unstable pose.")
            move_ready = False
